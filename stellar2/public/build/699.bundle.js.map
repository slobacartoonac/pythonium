{"version":3,"file":"699.bundle.js","mappings":"uZAIA,IAIIA,EAJAC,EAAoB,IAFoB,oBAAhBC,aAA8B,EAAIC,EAAOC,SAAS,QAAQF,YAAcA,aAE3D,QAAS,CAAEG,WAAW,EAAMC,OAAO,IAK5E,SAASC,IAIL,OAHsC,IAAlCP,EAAmBQ,aACnBR,EAAqB,IAAIS,WAAW,kBAEjCT,CACX,CARAC,EAAkBS,SAclB,IASIC,EATAC,EAAkB,EAEtB,SAASC,EAAkBC,EAAKC,GAC5B,MAAMC,EAAMD,EAAoB,EAAbD,EAAIG,QAGvB,OAFAV,IAAkBW,IAAIJ,EAAKE,EAAM,GACjCJ,EAAkBE,EAAIG,OACfD,CACX,CAUA,SAASG,EAAoBL,EAAKC,GAC9B,MAAMC,EAAMD,EAAoB,EAAbD,EAAIG,QAGvB,OAVwC,IAApCN,EAAqBH,aACrBG,EAAuB,IAAIS,aAAa,kBAErCT,GAKaO,IAAIJ,EAAKE,EAAM,GACnCJ,EAAkBE,EAAIG,OACfD,CACX,CAGO,MAAMK,EAETC,cAAcN,GACV,MAAMO,EAAMC,OAAOC,OAAOJ,EAAQK,WAGlC,OAFAH,EAAIP,IAAMA,EAEHO,CACX,CAEAI,qBACI,MAAMX,EAAMY,KAAKZ,IAGjB,OAFAY,KAAKZ,IAAM,EAEJA,CACX,CAEAa,OACI,MAAMb,EAAMY,KAAKD,qBACjB,qBAAwBX,EAC5B,CAMAM,WAAWQ,EAAOC,GACd,MAAMC,EAAM,cAAiBF,EAAOC,GACpC,OAAOV,EAAQY,OAAOD,EAC1B,CAIAF,QAEI,OADY,gBAAmBF,KAAKZ,OACrB,CACnB,CAIAe,SAEI,OADY,iBAAoBH,KAAKZ,OACtB,CACnB,CAMAkB,SAASC,EAAGC,EAAGC,GACX,mBAAsBT,KAAKZ,IAAKmB,EAAGC,EAAGC,EAC1C,CAOAC,aAAaC,EAAMC,EAASC,EAAgBC,GACxC,IACI,IAAIC,EAAO9B,EAAkB0B,EAAM,qBAC/BK,EAAOhC,EACX,MAAMiC,EAAO1B,EAAoBqB,EAAS,qBACpCM,EAAOlC,EACPmC,EAAO5B,EAAoBuB,EAAM,qBACjCM,EAAOpC,EACb,uBAA0BgB,KAAKZ,IAAK2B,EAAMC,EAAMC,EAAMC,EAAML,EAAgBM,EAAMC,EAItF,CAHE,QACET,EAAKrB,IAAIX,IAAkB0C,SAASN,EAAO,EAAGA,EAAO,EAAIC,IACzD,kBAAqBD,EAAa,EAAPC,EAC/B,CACJ,CAKAM,YAAYX,EAAMtB,GACd,IACI,IAAI0B,EAAO9B,EAAkB0B,EAAM,qBAC/BK,EAAOhC,EACX,sBAAyBgB,KAAKZ,IAAK2B,EAAMC,EAAM3B,EAInD,CAHE,QACEsB,EAAKrB,IAAIX,IAAkB0C,SAASN,EAAO,EAAGA,EAAO,EAAIC,IACzD,kBAAqBD,EAAa,EAAPC,EAC/B,CACJ,EAIG,MAAMO,EAETxB,qBACI,MAAMX,EAAMY,KAAKZ,IAGjB,OAFAY,KAAKZ,IAAM,EAEJA,CACX,CAEAa,OACI,MAAMb,EAAMY,KAAKD,qBACjB,kBAAqBX,EACzB,CAGImB,QAEA,OADY,mBAAsBP,KAAKZ,OACxB,CACnB,CAGImB,MAAEiB,GACF,mBAAsBxB,KAAKZ,IAAKoC,EACpC,CAGIhB,QAEA,OADY,mBAAsBR,KAAKZ,OACxB,CACnB,CAGIoB,MAAEgB,GACF,mBAAsBxB,KAAKZ,IAAKoC,EACpC,CAGIf,YAEA,OADY,uBAA0BT,KAAKZ,IAE/C,CAGIqB,UAAMe,GACN,uBAA0BxB,KAAKZ,IAAKoC,EACxC,EAGG,SAASC,EAAiBD,EAAME,GACnC,MAAM,IAAIC,OAtKcvC,EAsKWoC,EAtKNI,EAsKYF,EArKlCrD,EAAkBS,OAAOH,IAAkB0C,SAASjC,EAAKA,EAAMwC,MAD1E,IAA4BxC,EAAKwC,CAuKjC,CAEA7C,EAAuB,IAAIS,aAAa,iBACxCpB,EAAqB,IAAIS,WAAW,iB","sources":["webpack://stellar2/../gravity_calc/pkg/index_bg.js"],"sourcesContent":["import * as wasm from './index_bg.wasm';\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachedUint8Memory0;\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0.byteLength === 0) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1);\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nlet cachedFloat32Memory0;\nfunction getFloat32Memory0() {\n    if (cachedFloat32Memory0.byteLength === 0) {\n        cachedFloat32Memory0 = new Float32Array(wasm.memory.buffer);\n    }\n    return cachedFloat32Memory0;\n}\n\nfunction passArrayF32ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 4);\n    getFloat32Memory0().set(arg, ptr / 4);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n/**\n*/\nexport class Gravity {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Gravity.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_gravity_free(ptr);\n    }\n    /**\n    * @param {number} width\n    * @param {number} height\n    * @returns {Gravity}\n    */\n    static new(width, height) {\n        const ret = wasm.gravity_new(width, height);\n        return Gravity.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    width() {\n        const ret = wasm.gravity_width(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    height() {\n        const ret = wasm.gravity_height(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} x\n    * @param {number} y\n    * @param {number} scale\n    */\n    set_view(x, y, scale) {\n        wasm.gravity_set_view(this.ptr, x, y, scale);\n    }\n    /**\n    * @param {Uint8Array} data\n    * @param {Float32Array} planets\n    * @param {number} planets_length\n    * @param {Float32Array} view\n    */\n    draw_planets(data, planets, planets_length, view) {\n        try {\n            var ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n            var len0 = WASM_VECTOR_LEN;\n            const ptr1 = passArrayF32ToWasm0(planets, wasm.__wbindgen_malloc);\n            const len1 = WASM_VECTOR_LEN;\n            const ptr2 = passArrayF32ToWasm0(view, wasm.__wbindgen_malloc);\n            const len2 = WASM_VECTOR_LEN;\n            wasm.gravity_draw_planets(this.ptr, ptr0, len0, ptr1, len1, planets_length, ptr2, len2);\n        } finally {\n            data.set(getUint8Memory0().subarray(ptr0 / 1, ptr0 / 1 + len0));\n            wasm.__wbindgen_free(ptr0, len0 * 1);\n        }\n    }\n    /**\n    * @param {Uint8Array} data\n    * @param {number} length\n    */\n    mutate_data(data, length) {\n        try {\n            var ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.gravity_mutate_data(this.ptr, ptr0, len0, length);\n        } finally {\n            data.set(getUint8Memory0().subarray(ptr0 / 1, ptr0 / 1 + len0));\n            wasm.__wbindgen_free(ptr0, len0 * 1);\n        }\n    }\n}\n/**\n*/\nexport class View {\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_view_free(ptr);\n    }\n    /**\n    */\n    get x() {\n        const ret = wasm.__wbg_get_view_x(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    */\n    set x(arg0) {\n        wasm.__wbg_set_view_x(this.ptr, arg0);\n    }\n    /**\n    */\n    get y() {\n        const ret = wasm.__wbg_get_view_y(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    */\n    set y(arg0) {\n        wasm.__wbg_set_view_y(this.ptr, arg0);\n    }\n    /**\n    */\n    get scale() {\n        const ret = wasm.__wbg_get_view_scale(this.ptr);\n        return ret;\n    }\n    /**\n    */\n    set scale(arg0) {\n        wasm.__wbg_set_view_scale(this.ptr, arg0);\n    }\n}\n\nexport function __wbindgen_throw(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\ncachedFloat32Memory0 = new Float32Array(wasm.memory.buffer);\ncachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n\n"],"names":["cachedUint8Memory0","cachedTextDecoder","TextDecoder","module","require","ignoreBOM","fatal","getUint8Memory0","byteLength","Uint8Array","decode","cachedFloat32Memory0","WASM_VECTOR_LEN","passArray8ToWasm0","arg","malloc","ptr","length","set","passArrayF32ToWasm0","Float32Array","Gravity","static","obj","Object","create","prototype","__destroy_into_raw","this","free","width","height","ret","__wrap","set_view","x","y","scale","draw_planets","data","planets","planets_length","view","ptr0","len0","ptr1","len1","ptr2","len2","subarray","mutate_data","View","arg0","__wbindgen_throw","arg1","Error","len"],"sourceRoot":""}