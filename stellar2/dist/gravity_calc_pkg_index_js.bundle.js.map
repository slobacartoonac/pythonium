{"version":3,"file":"gravity_calc_pkg_index_js.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;AAAwC;;;;;;;;;;;;;;;;;;;;;;;;ACAA;;AAExC;;AAEA,oDAAoD,8BAA8B;;AAElF;;AAEA;AACA;AACA;AACA,4CAA4C,yDAAkB;AAC9D;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gDAAgD,yDAAkB;AAClE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;;AAEP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,QAAQ,8DAAuB;AAC/B;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,gBAAgB;AAChB;AACA;AACA,oBAAoB,uDAAgB;AACpC;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,oBAAoB,yDAAkB;AACtC;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,oBAAoB,0DAAmB;AACvC;AACA;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB;AACA;AACA,QAAQ,4DAAqB;AAC7B;AACA;AACA,cAAc,YAAY;AAC1B,cAAc,cAAc;AAC5B,cAAc,QAAQ;AACtB,cAAc,cAAc;AAC5B;AACA;AACA;AACA,+CAA+C,6DAAsB;AACrE;AACA,sDAAsD,6DAAsB;AAC5E;AACA,mDAAmD,6DAAsB;AACzE;AACA,YAAY,gEAAyB;AACrC,UAAU;AACV;AACA,YAAY,2DAAoB;AAChC;AACA;AACA;AACA,cAAc,YAAY;AAC1B,cAAc,QAAQ;AACtB;AACA;AACA;AACA,+CAA+C,6DAAsB;AACrE;AACA,YAAY,+DAAwB;AACpC,UAAU;AACV;AACA,YAAY,2DAAoB;AAChC;AACA;AACA;AACA;AACA;AACO;;AAEP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,QAAQ,2DAAoB;AAC5B;AACA;AACA;AACA;AACA,oBAAoB,4DAAqB;AACzC;AACA;AACA;AACA;AACA;AACA,QAAQ,4DAAqB;AAC7B;AACA;AACA;AACA;AACA,oBAAoB,4DAAqB;AACzC;AACA;AACA;AACA;AACA;AACA,QAAQ,4DAAqB;AAC7B;AACA;AACA;AACA;AACA,oBAAoB,gEAAyB;AAC7C;AACA;AACA;AACA;AACA;AACA,QAAQ,gEAAyB;AACjC;AACA;;AAEO;AACP;AACA;;AAEA,wCAAwC,yDAAkB;AAC1D,oCAAoC,yDAAkB","sources":["webpack://stellar2/../gravity_calc/pkg/index.js","webpack://stellar2/../gravity_calc/pkg/index_bg.js"],"sourcesContent":["import * as wasm from \"./index_bg.wasm\";\nexport * from \"./index_bg.js\";","import * as wasm from './index_bg.wasm';\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachedUint8Memory0;\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0.byteLength === 0) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1);\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nlet cachedFloat32Memory0;\nfunction getFloat32Memory0() {\n    if (cachedFloat32Memory0.byteLength === 0) {\n        cachedFloat32Memory0 = new Float32Array(wasm.memory.buffer);\n    }\n    return cachedFloat32Memory0;\n}\n\nfunction passArrayF32ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 4);\n    getFloat32Memory0().set(arg, ptr / 4);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n/**\n*/\nexport class Gravity {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Gravity.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_gravity_free(ptr);\n    }\n    /**\n    * @param {number} width\n    * @param {number} height\n    * @returns {Gravity}\n    */\n    static new(width, height) {\n        const ret = wasm.gravity_new(width, height);\n        return Gravity.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    width() {\n        const ret = wasm.gravity_width(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    height() {\n        const ret = wasm.gravity_height(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} x\n    * @param {number} y\n    * @param {number} scale\n    */\n    set_view(x, y, scale) {\n        wasm.gravity_set_view(this.ptr, x, y, scale);\n    }\n    /**\n    * @param {Uint8Array} data\n    * @param {Float32Array} planets\n    * @param {number} planets_length\n    * @param {Float32Array} view\n    */\n    draw_planets(data, planets, planets_length, view) {\n        try {\n            var ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n            var len0 = WASM_VECTOR_LEN;\n            const ptr1 = passArrayF32ToWasm0(planets, wasm.__wbindgen_malloc);\n            const len1 = WASM_VECTOR_LEN;\n            const ptr2 = passArrayF32ToWasm0(view, wasm.__wbindgen_malloc);\n            const len2 = WASM_VECTOR_LEN;\n            wasm.gravity_draw_planets(this.ptr, ptr0, len0, ptr1, len1, planets_length, ptr2, len2);\n        } finally {\n            data.set(getUint8Memory0().subarray(ptr0 / 1, ptr0 / 1 + len0));\n            wasm.__wbindgen_free(ptr0, len0 * 1);\n        }\n    }\n    /**\n    * @param {Uint8Array} data\n    * @param {number} length\n    */\n    mutate_data(data, length) {\n        try {\n            var ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.gravity_mutate_data(this.ptr, ptr0, len0, length);\n        } finally {\n            data.set(getUint8Memory0().subarray(ptr0 / 1, ptr0 / 1 + len0));\n            wasm.__wbindgen_free(ptr0, len0 * 1);\n        }\n    }\n}\n/**\n*/\nexport class View {\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_view_free(ptr);\n    }\n    /**\n    */\n    get x() {\n        const ret = wasm.__wbg_get_view_x(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    */\n    set x(arg0) {\n        wasm.__wbg_set_view_x(this.ptr, arg0);\n    }\n    /**\n    */\n    get y() {\n        const ret = wasm.__wbg_get_view_y(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    */\n    set y(arg0) {\n        wasm.__wbg_set_view_y(this.ptr, arg0);\n    }\n    /**\n    */\n    get scale() {\n        const ret = wasm.__wbg_get_view_scale(this.ptr);\n        return ret;\n    }\n    /**\n    */\n    set scale(arg0) {\n        wasm.__wbg_set_view_scale(this.ptr, arg0);\n    }\n}\n\nexport function __wbindgen_throw(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\ncachedFloat32Memory0 = new Float32Array(wasm.memory.buffer);\ncachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n\n"],"names":[],"sourceRoot":""}